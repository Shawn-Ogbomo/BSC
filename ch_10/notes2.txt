//The grammar for input is:
//Expression:
//Term
//Expression "+" Term
//Expression "-" Term
//
//
//Term :
//primary
//Term $(sqrt)
//Term "^" Primary
//Term "*" Primary
//Term "/" Primary
//Term "%" Primary
//
//
//Primary :
//Roman numeral
//"(" Expression ")"
//
//Roman numeral :
//<string, int>
//<char, int>


Roman_int expression(Token_stream& ts) {
	//calls term to get the roman_int
	// calls get token to get next token 
	  next token a + ?
		-return roman_int + term
	  is it a - ? 
            - return roman_int - term
}

Roman_int term(Token_stream& ts) {
	//calls primary


}

Roman_int primary(Token_stream& ts) {
	gets a token 
	is it a '('
	- call  Expression 

	if its not 
	-unget the token  
	return token 
}











parse roman code from an int 