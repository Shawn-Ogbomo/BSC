// vector of variables
struct Symbol_table{
	public:
	//functions to work with variables 
	//is the variable declared
	//is the variable const
}


class Variable{
	//public
		//constructor(char ch, const std::string& , int )
		//1 arg ctor()

	//private
		//is_const{}
		//kind{}
		//name{}
		//value{]
}

//is the name valid 
//name cannot contain special characters
//cannot start with underscore
// only one space 
//minimum 1 character
//max 15
//must start with a letter

//#declare key

//calculate 
 //statement 
	//expression
Token statement(token stream&ts){
	Token t = ts.get();		//get token()
	while (true){
		switch(/the tokens kind){
			 case let: 		
			  if  it is not declared
			 - build the variable object and push it back to vector of variables

			else if it is declared 
			// display appropriate message 
			break;

		case name: 
			if(name is in the vector of variables) 
				get the next token 

			else  display the appropriate message 
			// if it is not const 
			// re-assign the value of the name with the target value 
			//if it is const display the appropriate message
			// get next token 
			//break
		 	default:
			 //put token back into stream 
			 //call expression
		}
	}
}



let shawn = 7 
token <const> //think of an apporpriate chatacter to use for const qualifier
token <let> #
token <name> shawn 
token <kind> = 
token < roman_int> VII 